<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MathMon â€” Battle Prototype v1.3 (Final)</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: #e7f0ff;
            touch-action: manipulation;
        }
        .font-pixel {
            font-family: 'Press Start 2P', cursive;
        }
        .game-container {
            border: 8px solid #303952;
            box-shadow: 0 10px 20px rgba(0,0,0,0.2), inset 0 0 15px rgba(0,0,0,0.3);
        }
        .battle-scene {
            background-size: cover;
            background-position: center;
            image-rendering: pixelated;
        }
        .bg-grass {
            background: linear-gradient(to bottom, #78c850 0%, #78c850 5%, #58a830 5%, #58a830 10%, #78c850 10%, #78c850 15%, #58a830 15%, #58a830 20%, #78c850 20%, #78c850 100%),
                        linear-gradient(to top, #6ab64a 50%, #87CEEB 50%);
        }
        .bg-cave {
            background: linear-gradient(to bottom, #706050 60%, #403020 60%),
                        radial-gradient(circle at top center, #a18072, #504030 90%);
        }
        .bg-volcano {
            background: linear-gradient(to top, #e74c3c 20%, #c0392b 20%, #c0392b 40%, #2c3e50 40%);
        }
        .bg-legendary {
             background: linear-gradient(to bottom, #4834d4 60%, #130f40 60%);
        }

        .mathmon-sprite {
            image-rendering: pixelated;
            filter: drop-shadow(3px 3px 2px rgba(0,0,0,0.4));
            transition: transform 0.2s ease-in-out, opacity 0.2s ease-in-out;
        }
        .attack-anim { animation: attack-animation 0.4s ease-in-out; }
        .hit-anim { animation: hit-animation 0.3s ease-in-out; }
        .faint-anim { animation: faint-animation 1s forwards; }
        .evolution-anim { animation: evolution-animation 1.5s ease-in-out; }

        @keyframes attack-animation { 50% { transform: translate(-10px, -5px) scale(1.1); } }
        @keyframes hit-animation { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }
        @keyframes faint-animation { to { opacity: 0; transform: translateY(40px); } }
        @keyframes evolution-animation {
            0%, 100% { filter: drop-shadow(3px 3px 2px #fff) brightness(1); transform: scale(1); }
            10%, 30%, 50%, 70%, 90% { filter: drop-shadow(3px 3px 15px #fff) brightness(2.5); transform: scale(1.1); }
            20%, 40%, 60%, 80% { filter: drop-shadow(3px 3px 2px #fff) brightness(0.5); transform: scale(0.95); }
        }
        .crit-hit-text { animation: crit-hit-fade 1s ease-out forwards; }
        @keyframes crit-hit-fade {
            0% { opacity: 1; transform: translateY(0) scale(1); }
            100% { opacity: 0; transform: translateY(-50px) scale(1.5); }
        }

        .health-bar-inner { transition: width 0.5s ease-in-out; }
        .btn-move, .btn-action, .starter-card { transition: all 0.2s ease-in-out; }
        .btn-move:active, .btn-action:active { transform: scale(0.95); box-shadow: inset 2px 2px 4px rgba(0,0,0,0.2); }
        .starter-card:hover { transform: translateY(-5px); box-shadow: 0 8px 15px rgba(0,0,0,0.2); }
        .starter-card.selected {
            border-color: #fbc531;
            transform: scale(1.05);
            box-shadow: 0 0 20px #fbc531;
        }
        .hidden { display: none; }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-2 md:p-4">

    <div id="game-wrapper" class="w-full max-w-2xl mx-auto relative">
        <!-- CRITICAL HIT OVERLAY -->
        <div id="crit-overlay" class="absolute inset-0 flex items-center justify-center pointer-events-none z-50">
             <h2 class="font-pixel text-5xl text-yellow-400 opacity-0" style="text-shadow: 3px 3px #000;">CRITICAL HIT!</h2>
        </div>

        <!-- Character Selection Screen -->
        <div id="character-select-screen" class="game-container bg-blue-800 rounded-2xl p-6 text-center text-white">
            <h1 class="font-pixel text-2xl md:text-3xl mb-6 text-yellow-300" style="text-shadow: 2px 2px #c0392b;">Choose your Partner!</h1>
            <div id="starter-options" class="grid grid-cols-2 sm:grid-cols-3 gap-4 mb-6"></div>
            <button id="confirm-starter-btn" class="btn-action w-full max-w-xs mx-auto bg-gray-500 font-pixel p-4 rounded-lg border-b-8 border-gray-700 opacity-50 cursor-not-allowed">
                Start Adventure
            </button>
        </div>

        <!-- Main Menu Screen -->
        <div id="main-menu-screen" class="game-container bg-gray-700 rounded-2xl p-6 text-white hidden">
             <div class="flex justify-between items-center mb-6">
                <div class="flex items-center gap-3">
                    <img id="menu-sprite" class="h-16 w-16 bg-gray-800 rounded-full p-1">
                    <div>
                        <p id="menu-pokemon-name" class="font-bold text-xl"></p>
                        <p id="menu-level" class="text-sm text-gray-300"></p>
                    </div>
                </div>
                <div id="wins-display" class="font-bold text-yellow-400"></div>
            </div>
            <h1 id="challenge-title" class="font-pixel text-2xl text-center mb-6">Next Challenge</h1>
            <button id="start-battle-btn" class="btn-action w-full bg-green-500 hover:bg-green-600 font-pixel p-4 rounded-lg border-b-8 border-green-700">
                Find a Battle!
            </button>
        </div>

        <!-- Math Battle Screen -->
        <div id="battle-screen" class="game-container bg-white rounded-2xl p-4 shadow-2xl hidden relative">
            <div id="battle-scene" class="battle-scene w-full aspect-[4/3] rounded-lg mb-4 relative">
                <img id="player-sprite" class="mathmon-sprite absolute bottom-[5%] left-[10%] h-28 w-28">
                <img id="enemy-sprite" class="mathmon-sprite absolute top-[15%] right-[10%] h-24 w-24">
            </div>
            <div class="grid grid-cols-2 gap-4 mb-4">
                <div class="bg-gray-100 p-3 rounded-lg border-2 border-gray-300">
                    <div class="flex justify-between items-center mb-1"><h2 id="player-name" class="font-bold text-lg"></h2><span id="player-hp-text" class="text-sm font-semibold"></span></div>
                    <div class="w-full bg-gray-300 rounded-full h-4"><div id="player-hp-bar" class="bg-green-500 h-full rounded-full health-bar-inner"></div></div>
                </div>
                <div class="bg-gray-100 p-3 rounded-lg border-2 border-gray-300">
                    <div class="flex justify-between items-center mb-1"><h2 id="enemy-name" class="font-bold text-lg"></h2><span id="enemy-hp-text" class="text-sm font-semibold"></span></div>
                    <div class="w-full bg-gray-300 rounded-full h-4"><div id="enemy-hp-bar" class="bg-green-500 h-full rounded-full health-bar-inner"></div></div>
                </div>
            </div>
            <div class="bg-gray-800 text-white p-4 rounded-lg min-h-[120px]">
                <p id="game-message" class="text-center text-lg mb-4 h-8"></p>
                <div id="moves-container" class="grid grid-cols-2 gap-3"></div>
            </div>
            
            <!-- Result/Evolution Modal -->
            <div id="result-modal" class="absolute inset-0 bg-black bg-opacity-70 flex-col items-center justify-center p-4 hidden">
                <div class="bg-white p-8 rounded-2xl shadow-lg text-center w-full max-w-md">
                    <h3 id="result-message" class="text-4xl font-bold mb-4"></h3>
                    <div id="result-subtext" class="text-lg mb-6 min-h-[80px]"></div>
                    <button id="next-battle-btn" class="btn-action w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg text-2xl">Continue</button>
                </div>
            </div>
        </div>
    </div>

<script>
document.addEventListener('DOMContentLoaded', () => {

// --- GAME DATA ---
const ALL_MOVES = {
    'add-leaf': { name: 'Leaf Blade Addition', type: 'add' }, 'sub-quick': { name: 'Quick Subtraction', type: 'sub' }, 'mul-solar': { name: 'Solar Multiplication', type: 'mul' }, 'div-synthesis': { name: 'Synthesis Division', type: 'div' },
    'add-ember': { name: 'Ember Addition', type: 'add' }, 'sub-blaze': { name: 'Blaze Kick Subtraction', type: 'sub' }, 'mul-fire': { name: 'Fire Spin Multiply', type: 'mul' }, 'div-flare': { name: 'Flare Blitz Division', type: 'div' },
    'add-water': { name: 'Aqua Sum', type: 'add' }, 'sub-hydro': { name: 'Hydro Pump Subtraction', type: 'sub' }, 'mul-surf': { name: 'Surf Multiplication', type: 'mul' }, 'div-dive': { name: 'Dive Division', type: 'div' },
    'add-dragon': { name: 'Dragon Rage Add', type: 'add' }, 'sub-sand': { name: 'Sand Tomb Subtract', type: 'sub' }, 'mul-outrage': { name: 'Outrage Multiply', type: 'mul' }, 'div-earthquake': { name: 'Earthquake Division', type: 'div' },
    'add-shadow': { name: 'Shadow Ball Add', type: 'add' }, 'sub-hex': { name: 'Hex Subtraction', type: 'sub' }, 'mul-inferno': { name: 'Inferno Multiply', type: 'mul' }, 'div-dream': { name: 'Dream Eater Division', type: 'div' }
};

const MATHMONS = {
    treecko: { name: 'Treecko', evolutions: [ { name: 'Treecko', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/252.png', hp: 100, evolutionWins: 3 }, { name: 'Grovyle', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/253.png', hp: 150, evolutionWins: 7 }, { name: 'Sceptile', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/254.png', hp: 200, evolutionWins: null } ], moveset: ['add-leaf', 'sub-quick', 'mul-solar', 'div-synthesis'] },
    torchic: { name: 'Torchic', evolutions: [ { name: 'Torchic', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/255.png', hp: 110, evolutionWins: 3 }, { name: 'Combusken', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/256.png', hp: 160, evolutionWins: 7 }, { name: 'Blaziken', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/257.png', hp: 210, evolutionWins: null } ], moveset: ['add-ember', 'sub-blaze', 'mul-fire', 'div-flare'] },
    mudkip: { name: 'Mudkip', evolutions: [ { name: 'Mudkip', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/258.png', hp: 120, evolutionWins: 3 }, { name: 'Marshtomp', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/259.png', hp: 170, evolutionWins: 7 }, { name: 'Swampert', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/260.png', hp: 220, evolutionWins: null } ], moveset: ['add-water', 'sub-hydro', 'mul-surf', 'div-dive'] },
    gible: { name: 'Gible', evolutions: [ { name: 'Gible', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/443.png', hp: 100, evolutionWins: 4 }, { name: 'Gabite', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/444.png', hp: 150, evolutionWins: 8 }, { name: 'Garchomp', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/445.png', hp: 230, evolutionWins: null } ], moveset: ['add-dragon', 'sub-sand', 'mul-outrage', 'div-earthquake'] },
    litwick: { name: 'Litwick', evolutions: [ { name: 'Litwick', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/607.png', hp: 95, evolutionWins: 3 }, { name: 'Lampent', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/608.png', hp: 145, evolutionWins: 7 }, { name: 'Chandelure', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/609.png', hp: 195, evolutionWins: null } ], moveset: ['add-shadow', 'sub-hex', 'mul-inferno', 'div-dream'] }
};

const LEGENDARIES = {
    mewtwo: { name: 'Mewtwo', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/150.png', hp: 250 },
    lugia: { name: 'Lugia', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/249.png', hp: 260 },
    rayquaza: { name: 'Rayquaza', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/384.png', hp: 270 },
    groudon: { name: 'Groudon', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/383.png', hp: 250 },
    kyogre: { name: 'Kyogre', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/382.png', hp: 250 },
    dialga: { name: 'Dialga', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/483.png', hp: 260 },
    palkia: { name: 'Palkia', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/484.png', hp: 260 },
    giratina: { name: 'Giratina', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/487.png', hp: 270 },
    mew: { name: 'Mew', sprite: 'https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/151.png', hp: 300 } // The Champion
};

const BACKGROUNDS = ['bg-grass', 'bg-cave', 'bg-volcano', 'bg-legendary'];

// --- GAME STATE ---
let player = {};
let enemy = {};
let currentQuestion;
let isPlayerTurn;
let questionStartTime;
const CRIT_WINDOW_MS = 4000; // 4 seconds for a critical hit

// --- DOM Elements ---
const screens = { select: document.getElementById('character-select-screen'), menu: document.getElementById('main-menu-screen'), battle: document.getElementById('battle-screen') };
const critOverlay = document.getElementById('crit-overlay').querySelector('h2');
// ... (rest of DOM elements are the same)
const starterOptionsContainer = document.getElementById('starter-options');
const confirmStarterBtn = document.getElementById('confirm-starter-btn');
const startBattleBtn = document.getElementById('start-battle-btn');
const battleScene = document.getElementById('battle-scene');
const playerNameEl = document.getElementById('player-name'), playerHpTextEl = document.getElementById('player-hp-text'), playerHpBarEl = document.getElementById('player-hp-bar'), playerSpriteEl = document.getElementById('player-sprite');
const enemyNameEl = document.getElementById('enemy-name'), enemyHpTextEl = document.getElementById('enemy-hp-text'), enemyHpBarEl = document.getElementById('enemy-hp-bar'), enemySpriteEl = document.getElementById('enemy-sprite');
const gameMessageEl = document.getElementById('game-message'), movesContainerEl = document.getElementById('moves-container');
const resultModal = document.getElementById('result-modal'), resultMessageEl = document.getElementById('result-message'), resultSubtextEl = document.getElementById('result-subtext'), nextBattleBtn = document.getElementById('next-battle-btn');


// --- Initialization & Screen Management ---
function init() {
    renderStarterOptions();
    showScreen('select');
}

function renderStarterOptions() {
    starterOptionsContainer.innerHTML = '';
    Object.keys(MATHMONS).forEach(key => {
        const mon = MATHMONS[key];
        const card = document.createElement('div');
        card.className = 'starter-card bg-gray-700 p-4 rounded-lg border-4 border-transparent cursor-pointer';
        card.dataset.starterKey = key;
        card.innerHTML = `<img src="${mon.evolutions[0].sprite}" class="h-20 w-20 mx-auto mb-2"><p class="font-pixel text-sm">${mon.name}</p>`;
        card.addEventListener('click', () => selectStarter(key, card));
        starterOptionsContainer.appendChild(card);
    });
}

function selectStarter(key, cardElement) {
    player.starterKey = key;
    document.querySelectorAll('.starter-card').forEach(c => c.classList.remove('selected'));
    cardElement.classList.add('selected');
    confirmStarterBtn.classList.remove('opacity-50', 'cursor-not-allowed', 'bg-gray-500', 'border-gray-700');
    confirmStarterBtn.classList.add('bg-green-500', 'border-green-700');
}

function showScreen(screenId) {
    Object.values(screens).forEach(screen => screen.classList.add('hidden'));
    screens[screenId].classList.remove('hidden');
    if (screenId === 'menu') updateMainMenu();
}

function updateMainMenu() {
    const currentEvo = player.mathmon.evolutions[player.evolutionStage];
    document.getElementById('menu-sprite').src = currentEvo.sprite;
    document.getElementById('menu-pokemon-name').textContent = currentEvo.name;
    document.getElementById('menu-level').textContent = `Stage: ${player.evolutionStage + 1}`;
    document.getElementById('wins-display').textContent = `Wins: ${player.wins}`;
    
    const challengeTitle = document.getElementById('challenge-title');
    if (player.wins >= 10) {
        challengeTitle.textContent = "You are the Champion!";
        startBattleBtn.classList.add('hidden');
    } else if (player.wins === 9) {
        challengeTitle.textContent = "Challenge the Champion!";
        startBattleBtn.classList.remove('hidden');
    } else if (player.wins >= 7) {
        challengeTitle.textContent = "The Elite Four!";
        startBattleBtn.classList.remove('hidden');
    } else {
        challengeTitle.textContent = "Next Challenge";
        startBattleBtn.classList.remove('hidden');
    }
}

// --- Game Flow ---
function initializeBattle() {
    isPlayerTurn = true;
    player.currentHp = player.mathmon.evolutions[player.evolutionStage].hp;
    
    if (player.wins === 9) { // Champion Battle
        enemy = { ...LEGENDARIES.mew };
        battleScene.className = 'battle-scene w-full aspect-[4/3] rounded-lg mb-4 relative bg-legendary';
    } else if (player.wins >= 7) { // Elite Four
        const eliteFour = ['mewtwo', 'lugia', 'rayquaza', 'groudon', 'kyogre', 'dialga', 'palkia', 'giratina'];
        const bossKey = eliteFour[Math.floor(Math.random() * eliteFour.length)];
        enemy = { ...LEGENDARIES[bossKey] };
        battleScene.className = 'battle-scene w-full aspect-[4/3] rounded-lg mb-4 relative bg-legendary';
    } else { // Regular Trainers
        const enemyOptions = Object.keys(MATHMONS).filter(k => k !== player.starterKey);
        const enemyKey = enemyOptions[Math.floor(Math.random() * enemyOptions.length)];
        const enemyData = MATHMONS[enemyKey];
        let enemyEvoStage = (player.wins >= 4) ? 1 : 0;
        enemyEvoStage = Math.min(enemyEvoStage, enemyData.evolutions.length - 1);
        const enemyEvo = enemyData.evolutions[enemyEvoStage];
        enemy = { ...enemyEvo };
        battleScene.className = 'battle-scene w-full aspect-[4/3] rounded-lg mb-4 relative ';
        battleScene.classList.add(BACKGROUNDS[Math.floor(Math.random() * (BACKGROUNDS.length -1))]);
    }
    enemy.currentHp = enemy.hp;

    updateBattleUI();
    displayMessage(`A wild ${enemy.name} appeared!`);
    displayMoves();
    showScreen('battle');
}

// --- Battle Logic ---
function updateBattleUI() {
    const playerEvo = player.mathmon.evolutions[player.evolutionStage];
    playerNameEl.textContent = playerEvo.name;
    playerHpTextEl.textContent = `HP: ${player.currentHp}/${playerEvo.hp}`;
    playerHpBarEl.style.width = `${(player.currentHp / playerEvo.hp) * 100}%`;
    playerSpriteEl.src = playerEvo.sprite;
    updateHealthBarColor(playerHpBarEl, player.currentHp, playerEvo.hp);

    enemyNameEl.textContent = enemy.name;
    enemyHpTextEl.textContent = `HP: ${enemy.currentHp}/${enemy.hp}`;
    enemyHpBarEl.style.width = `${(enemy.currentHp / enemy.hp) * 100}%`;
    enemySpriteEl.src = enemy.sprite;
    updateHealthBarColor(enemyHpBarEl, enemy.currentHp, enemy.hp);
}

function displayMessage(msg) { gameMessageEl.textContent = msg; }

function displayMoves() {
    movesContainerEl.innerHTML = '';
    const playerMoveset = player.mathmon.moveset;
    playerMoveset.forEach(moveKey => {
        const move = ALL_MOVES[moveKey];
        const button = document.createElement('button');
        button.className = 'btn-move bg-gray-200 text-gray-800 p-3 rounded-md text-center shadow-md font-semibold text-sm';
        button.textContent = move.name;
        button.onclick = () => handleMoveSelection(move);
        movesContainerEl.appendChild(button);
    });
}

function handleMoveSelection(move) {
    if (!isPlayerTurn) return;
    let difficultyLevel = 1;
    if (player.wins >= 4) difficultyLevel = 2;
    if (player.wins >= 7) difficultyLevel = 3;
    
    currentQuestion = generateProblem(difficultyLevel, move.type);
    displayMessage(currentQuestion.text);
    questionStartTime = performance.now();
    
    movesContainerEl.innerHTML = '';
    currentQuestion.choices.forEach(choice => {
        const button = document.createElement('button');
        button.className = 'btn-move bg-yellow-400 text-gray-800 p-3 rounded-md text-center shadow-md font-bold text-xl';
        button.textContent = choice;
        button.onclick = () => submitAnswer(choice);
        movesContainerEl.appendChild(button);
    });
}

function submitAnswer(choice) {
    const timeTaken = performance.now() - questionStartTime;
    const isCorrect = choice === currentQuestion.answer;
    const isCrit = isCorrect && timeTaken <= CRIT_WINDOW_MS;

    if (isCorrect) {
        playerAttack(isCrit);
    } else {
        displayMessage(`Oops! The correct answer was ${currentQuestion.answer}.`);
        setTimeout(enemyTurn, 1500);
    }
}

function playerAttack(isCrit) {
    isPlayerTurn = false;
    let damage = 30 + (player.evolutionStage * 10) + Math.floor(Math.random() * 10);
    if (isCrit) {
        damage = Math.floor(damage * 1.5);
        showCritAnimation();
    }
    enemy.currentHp = Math.max(0, enemy.currentHp - damage);
    displayMessage(`${player.mathmon.evolutions[player.evolutionStage].name} attacks! ${isCrit ? 'A critical hit!' : ''}`);
    
    playerSpriteEl.classList.add('attack-anim');
    setTimeout(() => {
        playerSpriteEl.classList.remove('attack-anim');
        enemySpriteEl.classList.add('hit-anim');
        updateBattleUI();
        setTimeout(() => enemySpriteEl.classList.remove('hit-anim'), 300);
    }, 400);

    setTimeout(() => {
        if (enemy.currentHp <= 0) endGame(true);
        else enemyTurn();
    }, 1500);
}

function enemyTurn() {
    let damage = 20 + (Math.min(player.evolutionStage, 2) * 10) + Math.floor(Math.random() * 10);
    if (player.wins >= 7) damage += 15; // Bosses hit harder
    player.currentHp = Math.max(0, player.currentHp - damage);
    displayMessage(`${enemy.name} attacks back!`);

    enemySpriteEl.classList.add('attack-anim');
    setTimeout(() => {
        enemySpriteEl.classList.remove('attack-anim');
        playerSpriteEl.classList.add('hit-anim');
        updateBattleUI();
        setTimeout(() => playerSpriteEl.classList.remove('hit-anim'), 300);
    }, 400);

    setTimeout(() => {
        if (player.currentHp <= 0) endGame(false);
        else {
            isPlayerTurn = true;
            displayMessage('Your turn! Choose a move.');
            displayMoves();
        }
    }, 1500);
}

function endGame(playerWon) {
    let evolutionOccurred = false;
    if (playerWon) {
        player.wins++;
        resultMessageEl.textContent = 'You Win!';
        resultSubtextEl.innerHTML = `You defeated ${enemy.name}!`;
        enemySpriteEl.classList.add('faint-anim');
        evolutionOccurred = checkEvolution();
    } else {
        resultMessageEl.textContent = 'Game Over!';
        resultSubtextEl.textContent = 'Better luck next time!';
        playerSpriteEl.classList.add('faint-anim');
    }
    
    if (!evolutionOccurred) {
        resultModal.style.display = 'flex';
    }
}

function checkEvolution() {
    const currentEvo = player.mathmon.evolutions[player.evolutionStage];
    if (currentEvo.evolutionWins !== null && player.wins === currentEvo.evolutionWins) {
        const oldName = currentEvo.name;
        const oldSprite = currentEvo.sprite;
        player.evolutionStage++;
        const newEvo = player.mathmon.evolutions[player.evolutionStage];
        
        resultMessageEl.textContent = "What?";
        resultSubtextEl.innerHTML = `${oldName} is evolving!`;
        
        const evoContainer = document.createElement('div');
        evoContainer.className = "flex justify-center items-center my-4";
        const evoImg = document.createElement('img');
        evoImg.src = oldSprite;
        evoImg.className = "mathmon-sprite h-32 w-32";
        evoContainer.appendChild(evoImg);
        resultSubtextEl.appendChild(evoContainer);
        resultModal.style.display = 'flex';
        evoImg.classList.add('evolution-anim');
        
        setTimeout(() => {
            evoImg.src = newEvo.sprite;
            resultMessageEl.textContent = "Congratulations!";
            resultSubtextEl.innerHTML = `Your ${oldName} evolved into ${newEvo.name}!`;
        }, 1500);
        return true;
    }
    return false;
}

// --- Utility Functions ---
function generateProblem(level, type) {
    let num1, num2, answer, text;
    
    if (level === 1) { // Easy: Basic add/sub
        if (type === 'add') { num1 = Math.floor(Math.random() * 10) + 1; num2 = Math.floor(Math.random() * 10) + 1; answer = num1 + num2; text = `${num1} + ${num2} = ?`; } 
        else { num1 = Math.floor(Math.random() * 10) + 5; num2 = Math.floor(Math.random() * (num1-1)) + 1; answer = num1 - num2; text = `${num1} - ${num2} = ?`; }
    } else if (level === 2) { // Medium: Harder add/sub, easy mul
        if (type === 'add') { num1 = Math.floor(Math.random() * 25) + 5; num2 = Math.floor(Math.random() * 25) + 5; answer = num1 + num2; text = `${num1} + ${num2} = ?`; } 
        else if (type === 'sub') { num1 = Math.floor(Math.random() * 30) + 10; num2 = Math.floor(Math.random() * (num1-5)) + 5; answer = num1 - num2; text = `${num1} - ${num2} = ?`; } 
        else { num1 = Math.floor(Math.random() * 8) + 2; num2 = Math.floor(Math.random() * 8) + 2; answer = num1 * num2; text = `${num1} Ã— ${num2} = ?`; }
    } else { // Hard: 2-digit mul, simple div
        if (type === 'mul') { num1 = Math.floor(Math.random() * 11) + 5; num2 = Math.floor(Math.random() * 11) + 5; answer = num1 * num2; text = `${num1} Ã— ${num2} = ?`; } 
        else if (type === 'div') { num2 = Math.floor(Math.random() * 8) + 3; answer = Math.floor(Math.random() * 8) + 3; num1 = num2 * answer; text = `${num1} Ã· ${num2} = ?`; } 
        else { num1 = Math.floor(Math.random() * 50) + 25; num2 = Math.floor(Math.random() * 50) + 25; answer = num1 + num2; text = `${num1} + ${num2} = ?`; }
    }
    
    const choices = new Set([answer]);
    while (choices.size < 4) {
        const offset = (Math.random() < 0.5 ? 1 : -1) * (Math.floor(Math.random() * 5) + 1);
        const wrongAns = answer + offset;
        if (wrongAns !== answer && wrongAns >= 0) choices.add(wrongAns);
    }
    return { text, answer, choices: Array.from(choices).sort((a, b) => a - b) };
}

function showCritAnimation() {
    critOverlay.classList.remove('crit-hit-text');
    // This forces a reflow, allowing the animation to restart
    void critOverlay.offsetWidth; 
    critOverlay.classList.add('crit-hit-text');
}

function updateHealthBarColor(bar, current, max) {
    const percentage = (current / max) * 100;
    bar.classList.remove('bg-green-500', 'bg-yellow-500', 'bg-red-500');
    if (percentage < 25) bar.classList.add('bg-red-500');
    else if (percentage < 50) bar.classList.add('bg-yellow-500');
    else bar.classList.add('bg-green-500');
}

// --- Event Listeners ---
confirmStarterBtn.addEventListener('click', () => {
    if (player.starterKey) {
        player.mathmon = MATHMONS[player.starterKey];
        player.evolutionStage = 0;
        player.wins = 0;
        showScreen('menu');
    }
});
startBattleBtn.addEventListener('click', initializeBattle);
nextBattleBtn.addEventListener('click', () => {
    resultModal.style.display = 'none';
    playerSpriteEl.classList.remove('faint-anim');
    enemySpriteEl.classList.remove('faint-anim');
    showScreen('menu');
});

// --- Initial load ---
init();
});
</script>
</body>
</html>
